# ================================
# Middlewares Configuration
# ================================
# Middlewares define behaviors applied to requests before they reach the backend.
#
#   Extra Config & GitOps
# - If `extraConfig` is enabled in goma.yml and `watch` is turned on, you can
#   split routes and middlewares into multiple files.
# - All files must be located in the directory defined in goma.yml.
# - Any change to those files will trigger an automatic reload â€” no need to restart Goma Gateway.
# - This makes it easy to follow GitOps practices: just commit and push your changes,
#   then pull them into production to update routes and middlewares automatically.
#
#  Notes:
# - Middlewares are executed in the order they are defined in the route.
# - You can mix and match multiple middleware types for flexible behavior.
#
# Documentation: https://jkaninda.github.io/goma-gateway/middlewares/
# ================================

middlewares:
  # Redirect all HTTP traffic to HTTPS
  - name: enforceHttps
    type: redirectScheme
    rule:
      scheme: https

  # Rate limiting middleware (uses in-memory by default; Redis recommended for scale/persistence)
  - name: rate-limit
    type: rateLimit
    rule:
      unit: minute        
      requestsPerUnit: 60
      # banAfter: 5       # (Optional) Ban client after 5 repeated violations
      # banDuration: 2m   # (Optional) Ban duration (e.g., 2m, 1h)

  # Block access to sensitive/internal API endpoints
  - name: api-forbidden-paths
    type: access
    paths:
      - /api-docs/.*
      - /internal/.*
      - /docs/.*

  # Define access policies by IP address, range, or CIDR
  - name: deny-access
    type: accessPolicy
    rule:
      action: DENY # Options: DENY | ALLOW
      sourceRanges:
        - 10.25.5.30              # Single IP address
        - 10.25.10.30-10.25.10.100 # IP range
        - 2001:db8::/64           # IPv6 CIDR block
        - 10.25.10.0/16           # IPv4 CIDR block

  # HTTP caching middleware
  # - Uses in-memory storage by default (best for testing/dev)
  # - For production, Redis or another external cache backend is recommended
  - name: http-cache
    type: httpCache
    paths:
      - ^/books/(.*)$
    rule:
      maxTtl: 300 # Maximum cache lifetime (seconds). Responses older than this are invalidated.
      maxStale: 0 # Allow serving stale responses (in seconds) if client permits via Cache-Control:max-stale
      memoryLimit: 100Mi # Memory limit for in-memory cache. Units: Ki, Mi, Gi, Ti (case-insensitive: K, M, G, T also supported)
      disableCacheStatusHeader: false # If true, cache-related headers (e.g., X-Cache-Status) will be suppressed
      excludedResponseCodes: ["400", "404", "500-599"] # Response codes or ranges to exclude from caching

